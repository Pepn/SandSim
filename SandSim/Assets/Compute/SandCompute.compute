#pragma kernel CSMain

static const int numThreads = 8;
static const float4 empty = float4(0.0f, 0.0f, 0.0f, 0.0f);

int Resolution;
RWTexture2D<float4> Result;
RWTexture2D<float4> Input;
RWStructuredBuffer<int> spawnSandBuffer;

[numthreads(numThreads, numThreads, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{    
    // Calculate the 1D index based on the 2D coordinates
    int index = id.y * Resolution + id.x;
    
    Input[id.xy] = Input[id.xy] + float4(spawnSandBuffer[index], 0.0f, 0.0f, 0.0);
    
    int width = Resolution;
    int height = Resolution;
    
    // Loop over the texture from bottom to top
    int y = id.y;
    
    if (y >= height-1)
    {
        return;
    }
    
    int2 centerCoord = int2(id.x, y);
    int2 belowCoord = centerCoord + int2(0, 1); // Below
    int2 leftCoord = centerCoord + int2(1, 0); // Left
    int2 rightCoord = centerCoord + int2(1, 0); // Right
    int2 upCoord = centerCoord + int2(0, -1); // Up
    
    // start sand rules
    if (Input[centerCoord].r != empty.r)
    {
        if (Input[belowCoord].r == empty.r)
        {
            Result[belowCoord] = Input[centerCoord];
        }
    }
}
