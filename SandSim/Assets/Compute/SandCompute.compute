#pragma kernel CSMain

static const int numThreads = 4;

#define EMPTY 0.0f      // Represents normal pixel
#define DELETE -1.0f    // Represents normal pixel
#define SAND 1.0f       // Represents sand pixel
#define STONE 0.9f      // Represents sand pixel
#define WATER 0.8f      // Represents sand pixel

static const float4 empty = float4(0.0f, 0.0f, 0.0f, EMPTY);
static const float4 sand = float4(0.960, 0.931, 0.459, SAND);
static const float4 stone = float4(0.880, 0.851, 0.890, STONE);
static const float4 water = float4(0.424, 0.784, 1, WATER);

int Resolution;
int frameId;
RWTexture2D<float4> Result;
RWStructuredBuffer<float> spawnSandBuffer;

// to alternate the blocks
// https://en.wikipedia.org/wiki/Block_cellular_automaton
bool IsFrameIdEven(uint frameId)
{
    return frameId % 2;
}

void Swap(inout float4 a, inout float4 b)
{
    float4 tmp = a;
    a = b;
    b = tmp;
}

// Hash function to create pseudo-random-like values
float Hash(float2 p, int frameId)
{
    return frac(sin(dot(p, float2(12.9898, 78.233 + frameId))) * 43758.5453);
}

// Function to add a random color offset to a pixel
float4 AddRandomColorOffset(float4 color, float offsetRange, float2 pixelCoord, int frameId)
{
    float randomOffset = Hash(pixelCoord, frameId); // Generate a random value based on pixel coordinates
    randomOffset = (randomOffset * 2.0 - 1.0) * offsetRange; // Scale and center the random value within the offset range
    return float4((color + randomOffset).rgb, color.a);; // Add the random offset to each color channel
}

// TODO improve water dropping faster
// add dynamic lightning
// add other cellular automata (plants, fishes?) this probably needs to look outside the 2x2 cell blocks

void SpawnPixel(uint3 id)
{
    // Calculate the 1D index based on the 2D coordinates
    int index = id.y * Resolution + id.x;
    
    // read the input buffer and spawn pixel types
    if (spawnSandBuffer[index] == SAND)
    {
        Result[id.xy] = AddRandomColorOffset(sand, 0.15f, id.xy, frameId);
    }
    
    if (spawnSandBuffer[index] == DELETE && Result[id.xy].a != EMPTY)
    {
        Result[id.xy] = empty;
    }
    
    if (spawnSandBuffer[index] == STONE)
    {
        Result[id.xy] = AddRandomColorOffset(stone, 0.2f, id.xy, frameId);
    }
    
    if (spawnSandBuffer[index] == WATER)
    {
        Result[id.xy] = AddRandomColorOffset(water, 0.02f, id.xy, frameId);
    }
}

[numthreads(numThreads, numThreads, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{    
    // check the input buffer and spawn pixels
    SpawnPixel(id);
    
    // Calculate the top-left corner of the current 2x2 block
    int2 blockStart = int2(id.xy * 2);
    
    // On alternating frames offset the block 
    if (IsFrameIdEven(frameId))
    {
        blockStart += int2(-1, -1);
    }

    int2 pTopLeft = blockStart;
    int2 pTopRight = blockStart + int2(1, 0);
    int2 pBottomLeft = blockStart + int2(0, 1);
    int2 pBottomRight = blockStart + int2(1, 1);
    
    // hard stop at bottom
    if (pBottomLeft.y >= Resolution)
    {
        return;
    }
    
    // sand rules
    if (Result[pTopLeft].a == SAND && (Result[pBottomLeft].a == EMPTY || Result[pBottomLeft].a == WATER))
    {
        Swap(Result[pTopLeft], Result[pBottomLeft]);
    }
    if (Result[pTopRight].a == SAND && (Result[pBottomRight].a == EMPTY || Result[pBottomRight].a == WATER))
    {
        Swap(Result[pTopRight], Result[pBottomRight]);
    }
    if (Result[pTopLeft].a == SAND && Result[pBottomLeft].a != EMPTY && (Result[pBottomRight].a == EMPTY || Result[pBottomRight].a == WATER) && pBottomRight.x < Resolution)
    {
        Swap(Result[pTopLeft], Result[pBottomRight]);
    }
    if (Result[pTopRight].a == SAND && Result[pBottomRight].a != EMPTY && (Result[pBottomLeft].a == EMPTY || Result[pBottomLeft].a == WATER) && pBottomLeft.x >= 0)
    {
        Swap(Result[pTopRight], Result[pBottomLeft]);
    }
    
    // water rules
    
    // dropping
    if (Result[pTopLeft].a == WATER && Result[pBottomLeft].a == EMPTY)
    {
        Swap(Result[pTopLeft], Result[pBottomLeft]);
    }
    else if (Result[pTopRight].a == WATER && Result[pBottomRight].a == EMPTY)
    {
        Swap(Result[pTopRight], Result[pBottomRight]);
    }
    else
    {
        // spreading
        if (Hash(blockStart, frameId) < 0.5f) // either go left or right 
        {
            if (Result[pTopLeft].a == WATER && Result[pTopRight].a == EMPTY)
            {
                if (blockStart.x < Resolution - 1)
                {
                    Swap(Result[pTopLeft], Result[pTopRight]);
                }
            }
            else if (Result[pBottomLeft].a == WATER && Result[pBottomRight].a == EMPTY)
            {
                if (blockStart.x < Resolution - 1)
                {
                    Swap(Result[pBottomLeft], Result[pBottomRight]);
                }
            }
        }
        else
        {
            if (Result[pTopRight].a == WATER && Result[pTopLeft].a == EMPTY)
            {
                if (blockStart.x >= 0)
                {
                    Swap(Result[pTopLeft], Result[pTopRight]);
                }
            }
            else if (Result[pBottomRight].a == WATER && Result[pBottomLeft].a == EMPTY)
            {
                if (blockStart.x >= 0)
                {
                    Swap(Result[pBottomLeft], Result[pBottomRight]);
                }
            }
        }
    }
}
