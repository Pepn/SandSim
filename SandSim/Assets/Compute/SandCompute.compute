#pragma kernel CSMain

static const int numThreads = 4;
static const float4 empty = float4(0.0f, 0.0f, 0.0f, 0.0f);
static const float4 sand = float4(0.880, 0.851, 0.299, 0.0f);

int Resolution;
int step;
RWTexture2D<float4> Result;
RWStructuredBuffer<int> spawnSandBuffer;

bool IsFirstStep(uint step)
{
    return step == 0;
}

bool IsSecondStep(uint step)
{
    return step == 1;
}

[numthreads(numThreads, numThreads, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{    
    // Calculate the 1D index based on the 2D coordinates
    int index = id.y * Resolution + id.x;
    
    if (spawnSandBuffer[index] == 1 && Result[id.xy].r == 0)
    {
        Result[id.xy] = Result[id.xy] + sand;
    }
    
    // Calculate the top-left corner of the current 2x2 block
    int2 blockStart = int2(id.xy * 2);
    
    // On alternating frames offset the block 
    //https://en.wikipedia.org/wiki/Block_cellular_automaton
    if (IsFirstStep(step))
    {
        blockStart += int2(-1, -1);
    }

    // Iterate over each pixel within the 2x2 block
    for (int dx = 0; dx < 2; ++dx)
    {
        for (int dy = 0; dy < 2; ++dy)
        {
            int2 pixelCoord = blockStart + int2(dx, dy);
            
            // hard stop at bottom
            if (pixelCoord.y >= Resolution - 1)
            {
                continue;
            }

            // only do falling sand in top row of the grid
            if (dy == 1)
            {
                int2 belowCoord = pixelCoord + int2(0, 1);
                int2 belowLeftCoord = pixelCoord + int2(-1, 1);
                int2 belowRightCoord = pixelCoord + int2(1, 1);
                
                // if there is sand
                if (Result[pixelCoord].r != empty.r)
                {
                    // and below not swap them around
                    if (Result[belowCoord].r == empty.r)
                    {
                        Result[belowCoord] = Result[pixelCoord];
                        Result[pixelCoord] = empty;
                    }
                    else if (belowLeftCoord.x > 0 && Result[belowLeftCoord].r == empty.r && dx == 0)
                    {
                        Result[belowLeftCoord] = Result[pixelCoord];
                        Result[pixelCoord] = empty;
                    }
                    else if (belowRightCoord.x < Resolution - 1 && Result[belowRightCoord].r == empty.r && dx == 1)
                    {
                        Result[belowRightCoord] = Result[pixelCoord];
                        Result[pixelCoord] = empty;
                    }
                }
            }     
        }
    }
}
